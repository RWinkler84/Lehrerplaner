
- eigene Validierungslogik bauen
- wird eine Stunde unabsichtlich bearbeitet, darf sie nicht aus dem Timetable verschwunden sein, wenn man das Formular schließt


- persistente Datenschicht aufbauen:

- Ajax-Anbindung für CRUD-Funktionen in den Models
- automatisierte Sicherung von Lesson- und Taskdaten alle X Minuten

    -> sitze gerade an der cancel, uncancel-Funktion. uncancel wird im Backend zwei Wege haben
        -> bei scheduled lessons, werden diese über delete (by Id) aus den LessonChanges gelöscht
        -> bei Vertretung wird der Status auf sub gesetzt

- Einstellungsmenu: 
    - Stundenplan anlegen
    - Fächer anlegen
        - Farben für Fächer auswählen

- perspektivisch: Arbeitszeitracker einbauen

erledigt: 

- mouseout für weekOverview, der addTaskButton löscht <- hat so nicht funktioniert.
bin einen Umweg über CSS gegangen. der addtaskButtonWrapper wird nur angezeigt, wenn die Maus
über der WeekOverview hovert
- anlegen neuer aufgaben
- animation beim wochenwechsel
- beim Anlegen einer Aufgabe einen Zeitstempel für die zugehörige Stunden (Slot, Datum) erzeugen
    -> Zeit und Datum in der createTaskForm aus dem target auslesen und ins tr packen
- toogleButtons ist kaputt
- css-Klassen der Lessons im Timetable beim Erzeugen aus den Daten der Datenbank holen
- Änderungen an den Tasks sollten sich auch im Timetable wiederspiegeln, wenn es Fach und Klasse betrifft
- edit Task so erweitern, dass Änderungen des Selects in das TD übernommen werden
- higlighting für Stunden, wenn über aufgaben gehovert wird
- discardTaskChanges anlegen für den Fall, dass man Änderungen an einer bestehenden Task rückgängig machen will
- es gibt einen Fehler beim Auslesen des Selects für das Datenbackup, wodurch es gelegentlich auf undefined gesetzt wird
- verhindern, dass mehrere Tasks auf den gleichen Timeslot angelegt werden
- anlegen von Lessons aus der Mockup-Datenbank
- Formular für Lessons implementieren
- Task-Methoden auf OOP umbauen
- Farbe und Inhalt des LessonMenus bei gecancelten Lessons ändern (keine Task für Ausfallstunden) 
- Lessons im Timetable bearbeitbar machen (auf Ausfall setzen, dazugehörige Tasks anlegen) 
    -> createTask in der TaskView fehlt
    -> setLessonCanceled in der LessonView fehlt
- bugs bei den responsive buttons beheben
- focus bei mehreren ungespeicherten Task Forms korrigieren
- task-Formular muss Möglichkeit bieten, sie als fest terminiert auszuweisen
- abgleich zwischen angezeigten lessons und tasks

- logik für das zeitliche verschieben von Tasks, wenn Stunden dazukommen oder wegfallen
    -> erledigt: sammle die betroffenen Tasks, die wandern dürfen, in einem Array
    -> noch offen: task das gleichen Termins rutschen auf den nächstmöglichen Termin, egal ob Vertretungs- oder reguläre Stunden...
        -> möglicher Ansatz: Stundentermine bis zur spätesten Task vorberechnen
            -> funktioniert, muss nur noch Einträge des regulären Stundenplans löschen, wenn diese Stunde in 
            den Lessonchanges als Ausfall vermert -> Funktion buggt in der if noch herum
            -> außerdem funktioniert die Berechnung der Tasktermine bei Ausfall noch nicht, Vertretung scheint
            weitestgehend zu funktionieren
- grüner Marker, wenn aktuelle Woche angezeigt wird
- Datum bei jedem Wochentag angezeigen
- Tasks werden nach dem Erstellen einer neuen Aufgabe neu sortiert
- Datumsanzeige bei Tasks einbauen
- Stunden sollen auch bearbeitet werden können

- Funktionen für Lessons deaktivieren, die in der Vergangenheit liegen

- persistente Datenschicht aufbauen:
   - Ajax-query-funktion
    - php-MVC zur Durchleitung der Daten
        - Controller für Task und Lesson
        - Model für Task und Lesson
    - PHP-Datenbank-Connector per PDO
- Bugfix: Task-Id wird infinity, wenn vorher keine Task angelegt ist
- sollten mehrere Stundenpläne in der Datenbank sein, können diese entsprechend ihres Gültigkeitsdatums dargestellt werden
